"""autogenerated by genmsg_py from ExecutionFeedback.msg. Do not edit."""
import roslib.message
import struct


class ExecutionFeedback(roslib.message.Message):
  _md5sum = "0ed22f3deeb7906398652d8fd30f62e1"
  _type = "srs_control_task/ExecutionFeedback"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#define a feedback message
string current_state
bool solution_required
uint32 exceptional_case_id


"""
  __slots__ = ['current_state','solution_required','exceptional_case_id']
  _slot_types = ['string','bool','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       current_state,solution_required,exceptional_case_id
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(ExecutionFeedback, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.current_state is None:
        self.current_state = ''
      if self.solution_required is None:
        self.solution_required = False
      if self.exceptional_case_id is None:
        self.exceptional_case_id = 0
    else:
      self.current_state = ''
      self.solution_required = False
      self.exceptional_case_id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self.current_state
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x.encode()))
      _x = self
      buff.write(_struct_BI.pack(_x.solution_required, _x.exceptional_case_id))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.current_state = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.solution_required, _x.exceptional_case_id,) = _struct_BI.unpack(str[start:end])
      self.solution_required = bool(self.solution_required)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self.current_state
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x.encode()))
      _x = self
      buff.write(_struct_BI.pack(_x.solution_required, _x.exceptional_case_id))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.current_state = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.solution_required, _x.exceptional_case_id,) = _struct_BI.unpack(str[start:end])
      self.solution_required = bool(self.solution_required)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_BI = struct.Struct("<BI")
