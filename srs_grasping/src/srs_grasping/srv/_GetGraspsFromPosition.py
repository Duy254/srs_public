"""autogenerated by genmsg_py from GetGraspsFromPositionRequest.msg. Do not edit."""
import roslib.message
import struct

import geometry_msgs.msg

class GetGraspsFromPositionRequest(roslib.message.Message):
  _md5sum = "cb5903652a339bd327b00b1b46412c31"
  _type = "srs_grasping/GetGraspsFromPositionRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 object_id
geometry_msgs/Pose object_pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

"""
  __slots__ = ['object_id','object_pose']
  _slot_types = ['int32','geometry_msgs/Pose']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       object_id,object_pose
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(GetGraspsFromPositionRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.object_id is None:
        self.object_id = 0
      if self.object_pose is None:
        self.object_pose = geometry_msgs.msg.Pose()
    else:
      self.object_id = 0
      self.object_pose = geometry_msgs.msg.Pose()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_i7d.pack(_x.object_id, _x.object_pose.position.x, _x.object_pose.position.y, _x.object_pose.position.z, _x.object_pose.orientation.x, _x.object_pose.orientation.y, _x.object_pose.orientation.z, _x.object_pose.orientation.w))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.object_pose is None:
        self.object_pose = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 60
      (_x.object_id, _x.object_pose.position.x, _x.object_pose.position.y, _x.object_pose.position.z, _x.object_pose.orientation.x, _x.object_pose.orientation.y, _x.object_pose.orientation.z, _x.object_pose.orientation.w,) = _struct_i7d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_i7d.pack(_x.object_id, _x.object_pose.position.x, _x.object_pose.position.y, _x.object_pose.position.z, _x.object_pose.orientation.x, _x.object_pose.orientation.y, _x.object_pose.orientation.z, _x.object_pose.orientation.w))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.object_pose is None:
        self.object_pose = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 60
      (_x.object_id, _x.object_pose.position.x, _x.object_pose.position.y, _x.object_pose.position.z, _x.object_pose.orientation.x, _x.object_pose.orientation.y, _x.object_pose.orientation.z, _x.object_pose.orientation.w,) = _struct_i7d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_i7d = struct.Struct("<i7d")
"""autogenerated by genmsg_py from GetGraspsFromPositionResponse.msg. Do not edit."""
import roslib.message
import struct

import geometry_msgs.msg
import srs_msgs.msg

class GetGraspsFromPositionResponse(roslib.message.Message):
  _md5sum = "557fc92f838930c4c9fa17dc5fd74bbc"
  _type = "srs_grasping/GetGraspsFromPositionResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool feasible_grasp_available
srs_msgs/GraspSubConfiguration[] grasp_configuration


================================================================================
MSG: srs_msgs/GraspSubConfiguration
float64[] sdh_joint_values
geometry_msgs/Pose grasp
geometry_msgs/Pose pre_grasp
string category

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

"""
  __slots__ = ['feasible_grasp_available','grasp_configuration']
  _slot_types = ['bool','srs_msgs/GraspSubConfiguration[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       feasible_grasp_available,grasp_configuration
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(GetGraspsFromPositionResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.feasible_grasp_available is None:
        self.feasible_grasp_available = False
      if self.grasp_configuration is None:
        self.grasp_configuration = []
    else:
      self.feasible_grasp_available = False
      self.grasp_configuration = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      buff.write(_struct_B.pack(self.feasible_grasp_available))
      length = len(self.grasp_configuration)
      buff.write(_struct_I.pack(length))
      for val1 in self.grasp_configuration:
        length = len(val1.sdh_joint_values)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.sdh_joint_values))
        _v1 = val1.grasp
        _v2 = _v1.position
        _x = _v2
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v3 = _v1.orientation
        _x = _v3
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _v4 = val1.pre_grasp
        _v5 = _v4.position
        _x = _v5
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v6 = _v4.orientation
        _x = _v6
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.category
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 1
      (self.feasible_grasp_available,) = _struct_B.unpack(str[start:end])
      self.feasible_grasp_available = bool(self.feasible_grasp_available)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.grasp_configuration = []
      for i in range(0, length):
        val1 = srs_msgs.msg.GraspSubConfiguration()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.sdh_joint_values = struct.unpack(pattern, str[start:end])
        _v7 = val1.grasp
        _v8 = _v7.position
        _x = _v8
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v9 = _v7.orientation
        _x = _v9
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _v10 = val1.pre_grasp
        _v11 = _v10.position
        _x = _v11
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v12 = _v10.orientation
        _x = _v12
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.category = str[start:end]
        self.grasp_configuration.append(val1)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      buff.write(_struct_B.pack(self.feasible_grasp_available))
      length = len(self.grasp_configuration)
      buff.write(_struct_I.pack(length))
      for val1 in self.grasp_configuration:
        length = len(val1.sdh_joint_values)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.sdh_joint_values.tostring())
        _v13 = val1.grasp
        _v14 = _v13.position
        _x = _v14
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v15 = _v13.orientation
        _x = _v15
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _v16 = val1.pre_grasp
        _v17 = _v16.position
        _x = _v17
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v18 = _v16.orientation
        _x = _v18
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.category
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.feasible_grasp_available,) = _struct_B.unpack(str[start:end])
      self.feasible_grasp_available = bool(self.feasible_grasp_available)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.grasp_configuration = []
      for i in range(0, length):
        val1 = srs_msgs.msg.GraspSubConfiguration()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.sdh_joint_values = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        _v19 = val1.grasp
        _v20 = _v19.position
        _x = _v20
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v21 = _v19.orientation
        _x = _v21
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _v22 = val1.pre_grasp
        _v23 = _v22.position
        _x = _v23
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v24 = _v22.orientation
        _x = _v24
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.category = str[start:end]
        self.grasp_configuration.append(val1)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_4d = struct.Struct("<4d")
_struct_B = struct.Struct("<B")
_struct_3d = struct.Struct("<3d")
class GetGraspsFromPosition(roslib.message.ServiceDefinition):
  _type          = 'srs_grasping/GetGraspsFromPosition'
  _md5sum = 'df8bf0b028f9699d0ff4b300630fff51'
  _request_class  = GetGraspsFromPositionRequest
  _response_class = GetGraspsFromPositionResponse
