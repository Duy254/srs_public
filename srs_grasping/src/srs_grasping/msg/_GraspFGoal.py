"""autogenerated by genmsg_py from GraspFGoal.msg. Do not edit."""
import roslib.message
import struct

import geometry_msgs.msg

class GraspFGoal(roslib.message.Message):
  _md5sum = "cb5903652a339bd327b00b1b46412c31"
  _type = "srs_grasping/GraspFGoal"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
int32 object_id
geometry_msgs/Pose object_pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

"""
  __slots__ = ['object_id','object_pose']
  _slot_types = ['int32','geometry_msgs/Pose']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       object_id,object_pose
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(GraspFGoal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.object_id is None:
        self.object_id = 0
      if self.object_pose is None:
        self.object_pose = geometry_msgs.msg.Pose()
    else:
      self.object_id = 0
      self.object_pose = geometry_msgs.msg.Pose()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_i7d.pack(_x.object_id, _x.object_pose.position.x, _x.object_pose.position.y, _x.object_pose.position.z, _x.object_pose.orientation.x, _x.object_pose.orientation.y, _x.object_pose.orientation.z, _x.object_pose.orientation.w))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.object_pose is None:
        self.object_pose = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 60
      (_x.object_id, _x.object_pose.position.x, _x.object_pose.position.y, _x.object_pose.position.z, _x.object_pose.orientation.x, _x.object_pose.orientation.y, _x.object_pose.orientation.z, _x.object_pose.orientation.w,) = _struct_i7d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_i7d.pack(_x.object_id, _x.object_pose.position.x, _x.object_pose.position.y, _x.object_pose.position.z, _x.object_pose.orientation.x, _x.object_pose.orientation.y, _x.object_pose.orientation.z, _x.object_pose.orientation.w))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.object_pose is None:
        self.object_pose = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 60
      (_x.object_id, _x.object_pose.position.x, _x.object_pose.position.y, _x.object_pose.position.z, _x.object_pose.orientation.x, _x.object_pose.orientation.y, _x.object_pose.orientation.z, _x.object_pose.orientation.w,) = _struct_i7d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_i7d = struct.Struct("<i7d")
