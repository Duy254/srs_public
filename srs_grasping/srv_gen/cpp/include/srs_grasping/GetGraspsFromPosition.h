/* Auto-generated by genmsg_cpp for file /home/emisario/git/care-o-bot/srs/srs_grasping/srv/GetGraspsFromPosition.srv */
#ifndef SRS_GRASPING_SERVICE_GETGRASPSFROMPOSITION_H
#define SRS_GRASPING_SERVICE_GETGRASPSFROMPOSITION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "geometry_msgs/Pose.h"


#include "srs_msgs/GraspSubConfiguration.h"

namespace srs_grasping
{
template <class ContainerAllocator>
struct GetGraspsFromPositionRequest_ {
  typedef GetGraspsFromPositionRequest_<ContainerAllocator> Type;

  GetGraspsFromPositionRequest_()
  : object_id(0)
  , object_pose()
  {
  }

  GetGraspsFromPositionRequest_(const ContainerAllocator& _alloc)
  : object_id(0)
  , object_pose(_alloc)
  {
  }

  typedef int32_t _object_id_type;
  int32_t object_id;

  typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _object_pose_type;
   ::geometry_msgs::Pose_<ContainerAllocator>  object_pose;


private:
  static const char* __s_getDataType_() { return "srs_grasping/GetGraspsFromPositionRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "cb5903652a339bd327b00b1b46412c31"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "df8bf0b028f9699d0ff4b300630fff51"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int32 object_id\n\
geometry_msgs/Pose object_pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, object_id);
    ros::serialization::serialize(stream, object_pose);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, object_id);
    ros::serialization::deserialize(stream, object_pose);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(object_id);
    size += ros::serialization::serializationLength(object_pose);
    return size;
  }

  typedef boost::shared_ptr< ::srs_grasping::GetGraspsFromPositionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::srs_grasping::GetGraspsFromPositionRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GetGraspsFromPositionRequest
typedef  ::srs_grasping::GetGraspsFromPositionRequest_<std::allocator<void> > GetGraspsFromPositionRequest;

typedef boost::shared_ptr< ::srs_grasping::GetGraspsFromPositionRequest> GetGraspsFromPositionRequestPtr;
typedef boost::shared_ptr< ::srs_grasping::GetGraspsFromPositionRequest const> GetGraspsFromPositionRequestConstPtr;


template <class ContainerAllocator>
struct GetGraspsFromPositionResponse_ {
  typedef GetGraspsFromPositionResponse_<ContainerAllocator> Type;

  GetGraspsFromPositionResponse_()
  : feasible_grasp_available(false)
  , grasp_configuration()
  {
  }

  GetGraspsFromPositionResponse_(const ContainerAllocator& _alloc)
  : feasible_grasp_available(false)
  , grasp_configuration(_alloc)
  {
  }

  typedef uint8_t _feasible_grasp_available_type;
  uint8_t feasible_grasp_available;

  typedef std::vector< ::srs_msgs::GraspSubConfiguration_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::srs_msgs::GraspSubConfiguration_<ContainerAllocator> >::other >  _grasp_configuration_type;
  std::vector< ::srs_msgs::GraspSubConfiguration_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::srs_msgs::GraspSubConfiguration_<ContainerAllocator> >::other >  grasp_configuration;


  ROS_DEPRECATED uint32_t get_grasp_configuration_size() const { return (uint32_t)grasp_configuration.size(); }
  ROS_DEPRECATED void set_grasp_configuration_size(uint32_t size) { grasp_configuration.resize((size_t)size); }
  ROS_DEPRECATED void get_grasp_configuration_vec(std::vector< ::srs_msgs::GraspSubConfiguration_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::srs_msgs::GraspSubConfiguration_<ContainerAllocator> >::other > & vec) const { vec = this->grasp_configuration; }
  ROS_DEPRECATED void set_grasp_configuration_vec(const std::vector< ::srs_msgs::GraspSubConfiguration_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::srs_msgs::GraspSubConfiguration_<ContainerAllocator> >::other > & vec) { this->grasp_configuration = vec; }
private:
  static const char* __s_getDataType_() { return "srs_grasping/GetGraspsFromPositionResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "557fc92f838930c4c9fa17dc5fd74bbc"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "df8bf0b028f9699d0ff4b300630fff51"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "bool feasible_grasp_available\n\
srs_msgs/GraspSubConfiguration[] grasp_configuration\n\
\n\
\n\
================================================================================\n\
MSG: srs_msgs/GraspSubConfiguration\n\
float64[] sdh_joint_values\n\
geometry_msgs/Pose grasp\n\
geometry_msgs/Pose pre_grasp\n\
string category\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, feasible_grasp_available);
    ros::serialization::serialize(stream, grasp_configuration);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, feasible_grasp_available);
    ros::serialization::deserialize(stream, grasp_configuration);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(feasible_grasp_available);
    size += ros::serialization::serializationLength(grasp_configuration);
    return size;
  }

  typedef boost::shared_ptr< ::srs_grasping::GetGraspsFromPositionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::srs_grasping::GetGraspsFromPositionResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GetGraspsFromPositionResponse
typedef  ::srs_grasping::GetGraspsFromPositionResponse_<std::allocator<void> > GetGraspsFromPositionResponse;

typedef boost::shared_ptr< ::srs_grasping::GetGraspsFromPositionResponse> GetGraspsFromPositionResponsePtr;
typedef boost::shared_ptr< ::srs_grasping::GetGraspsFromPositionResponse const> GetGraspsFromPositionResponseConstPtr;

struct GetGraspsFromPosition
{

typedef GetGraspsFromPositionRequest Request;
typedef GetGraspsFromPositionResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct GetGraspsFromPosition
} // namespace srs_grasping

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::srs_grasping::GetGraspsFromPositionRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::srs_grasping::GetGraspsFromPositionRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::srs_grasping::GetGraspsFromPositionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cb5903652a339bd327b00b1b46412c31";
  }

  static const char* value(const  ::srs_grasping::GetGraspsFromPositionRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xcb5903652a339bd3ULL;
  static const uint64_t static_value2 = 0x27b00b1b46412c31ULL;
};

template<class ContainerAllocator>
struct DataType< ::srs_grasping::GetGraspsFromPositionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "srs_grasping/GetGraspsFromPositionRequest";
  }

  static const char* value(const  ::srs_grasping::GetGraspsFromPositionRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::srs_grasping::GetGraspsFromPositionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 object_id\n\
geometry_msgs/Pose object_pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::srs_grasping::GetGraspsFromPositionRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::srs_grasping::GetGraspsFromPositionRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::srs_grasping::GetGraspsFromPositionResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::srs_grasping::GetGraspsFromPositionResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::srs_grasping::GetGraspsFromPositionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "557fc92f838930c4c9fa17dc5fd74bbc";
  }

  static const char* value(const  ::srs_grasping::GetGraspsFromPositionResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x557fc92f838930c4ULL;
  static const uint64_t static_value2 = 0xc9fa17dc5fd74bbcULL;
};

template<class ContainerAllocator>
struct DataType< ::srs_grasping::GetGraspsFromPositionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "srs_grasping/GetGraspsFromPositionResponse";
  }

  static const char* value(const  ::srs_grasping::GetGraspsFromPositionResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::srs_grasping::GetGraspsFromPositionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool feasible_grasp_available\n\
srs_msgs/GraspSubConfiguration[] grasp_configuration\n\
\n\
\n\
================================================================================\n\
MSG: srs_msgs/GraspSubConfiguration\n\
float64[] sdh_joint_values\n\
geometry_msgs/Pose grasp\n\
geometry_msgs/Pose pre_grasp\n\
string category\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::srs_grasping::GetGraspsFromPositionResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::srs_grasping::GetGraspsFromPositionRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.object_id);
    stream.next(m.object_pose);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetGraspsFromPositionRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::srs_grasping::GetGraspsFromPositionResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.feasible_grasp_available);
    stream.next(m.grasp_configuration);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetGraspsFromPositionResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<srs_grasping::GetGraspsFromPosition> {
  static const char* value() 
  {
    return "df8bf0b028f9699d0ff4b300630fff51";
  }

  static const char* value(const srs_grasping::GetGraspsFromPosition&) { return value(); } 
};

template<>
struct DataType<srs_grasping::GetGraspsFromPosition> {
  static const char* value() 
  {
    return "srs_grasping/GetGraspsFromPosition";
  }

  static const char* value(const srs_grasping::GetGraspsFromPosition&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<srs_grasping::GetGraspsFromPositionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "df8bf0b028f9699d0ff4b300630fff51";
  }

  static const char* value(const srs_grasping::GetGraspsFromPositionRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<srs_grasping::GetGraspsFromPositionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "srs_grasping/GetGraspsFromPosition";
  }

  static const char* value(const srs_grasping::GetGraspsFromPositionRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<srs_grasping::GetGraspsFromPositionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "df8bf0b028f9699d0ff4b300630fff51";
  }

  static const char* value(const srs_grasping::GetGraspsFromPositionResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<srs_grasping::GetGraspsFromPositionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "srs_grasping/GetGraspsFromPosition";
  }

  static const char* value(const srs_grasping::GetGraspsFromPositionResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // SRS_GRASPING_SERVICE_GETGRASPSFROMPOSITION_H

