/* Auto-generated by genmsg_cpp for file /home/emisario/git/care-o-bot/srs/srs_grasping/srv/GetGraspConfigurations.srv */
#ifndef SRS_GRASPING_SERVICE_GETGRASPCONFIGURATIONS_H
#define SRS_GRASPING_SERVICE_GETGRASPCONFIGURATIONS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "srs_msgs/GraspConfiguration.h"

namespace srs_grasping
{
template <class ContainerAllocator>
struct GetGraspConfigurationsRequest_ {
  typedef GetGraspConfigurationsRequest_<ContainerAllocator> Type;

  GetGraspConfigurationsRequest_()
  : object_id(0)
  {
  }

  GetGraspConfigurationsRequest_(const ContainerAllocator& _alloc)
  : object_id(0)
  {
  }

  typedef int32_t _object_id_type;
  int32_t object_id;


private:
  static const char* __s_getDataType_() { return "srs_grasping/GetGraspConfigurationsRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "d6a7063359b15cbc8bac77de0a1cc2cb"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "37caef0185f2ced87cd79f4e67bb74e0"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int32 object_id\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, object_id);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, object_id);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(object_id);
    return size;
  }

  typedef boost::shared_ptr< ::srs_grasping::GetGraspConfigurationsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::srs_grasping::GetGraspConfigurationsRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GetGraspConfigurationsRequest
typedef  ::srs_grasping::GetGraspConfigurationsRequest_<std::allocator<void> > GetGraspConfigurationsRequest;

typedef boost::shared_ptr< ::srs_grasping::GetGraspConfigurationsRequest> GetGraspConfigurationsRequestPtr;
typedef boost::shared_ptr< ::srs_grasping::GetGraspConfigurationsRequest const> GetGraspConfigurationsRequestConstPtr;


template <class ContainerAllocator>
struct GetGraspConfigurationsResponse_ {
  typedef GetGraspConfigurationsResponse_<ContainerAllocator> Type;

  GetGraspConfigurationsResponse_()
  : grasp_configuration()
  {
  }

  GetGraspConfigurationsResponse_(const ContainerAllocator& _alloc)
  : grasp_configuration(_alloc)
  {
  }

  typedef std::vector< ::srs_msgs::GraspConfiguration_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::srs_msgs::GraspConfiguration_<ContainerAllocator> >::other >  _grasp_configuration_type;
  std::vector< ::srs_msgs::GraspConfiguration_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::srs_msgs::GraspConfiguration_<ContainerAllocator> >::other >  grasp_configuration;


  ROS_DEPRECATED uint32_t get_grasp_configuration_size() const { return (uint32_t)grasp_configuration.size(); }
  ROS_DEPRECATED void set_grasp_configuration_size(uint32_t size) { grasp_configuration.resize((size_t)size); }
  ROS_DEPRECATED void get_grasp_configuration_vec(std::vector< ::srs_msgs::GraspConfiguration_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::srs_msgs::GraspConfiguration_<ContainerAllocator> >::other > & vec) const { vec = this->grasp_configuration; }
  ROS_DEPRECATED void set_grasp_configuration_vec(const std::vector< ::srs_msgs::GraspConfiguration_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::srs_msgs::GraspConfiguration_<ContainerAllocator> >::other > & vec) { this->grasp_configuration = vec; }
private:
  static const char* __s_getDataType_() { return "srs_grasping/GetGraspConfigurationsResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "67606ed8cbee8f72e0a708d704b9126f"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "37caef0185f2ced87cd79f4e67bb74e0"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "srs_msgs/GraspConfiguration[] grasp_configuration\n\
\n\
\n\
================================================================================\n\
MSG: srs_msgs/GraspConfiguration\n\
int32 object_id\n\
string hand_type\n\
float64[] sdh_joint_values\n\
string target_link #link which should be moved to pre_grasp (e.g. sdh_palm_link)\n\
geometry_msgs/PoseStamped pre_grasp\n\
geometry_msgs/PoseStamped grasp\n\
string category\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, grasp_configuration);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, grasp_configuration);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(grasp_configuration);
    return size;
  }

  typedef boost::shared_ptr< ::srs_grasping::GetGraspConfigurationsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::srs_grasping::GetGraspConfigurationsResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GetGraspConfigurationsResponse
typedef  ::srs_grasping::GetGraspConfigurationsResponse_<std::allocator<void> > GetGraspConfigurationsResponse;

typedef boost::shared_ptr< ::srs_grasping::GetGraspConfigurationsResponse> GetGraspConfigurationsResponsePtr;
typedef boost::shared_ptr< ::srs_grasping::GetGraspConfigurationsResponse const> GetGraspConfigurationsResponseConstPtr;

struct GetGraspConfigurations
{

typedef GetGraspConfigurationsRequest Request;
typedef GetGraspConfigurationsResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct GetGraspConfigurations
} // namespace srs_grasping

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::srs_grasping::GetGraspConfigurationsRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::srs_grasping::GetGraspConfigurationsRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::srs_grasping::GetGraspConfigurationsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d6a7063359b15cbc8bac77de0a1cc2cb";
  }

  static const char* value(const  ::srs_grasping::GetGraspConfigurationsRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd6a7063359b15cbcULL;
  static const uint64_t static_value2 = 0x8bac77de0a1cc2cbULL;
};

template<class ContainerAllocator>
struct DataType< ::srs_grasping::GetGraspConfigurationsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "srs_grasping/GetGraspConfigurationsRequest";
  }

  static const char* value(const  ::srs_grasping::GetGraspConfigurationsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::srs_grasping::GetGraspConfigurationsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 object_id\n\
\n\
";
  }

  static const char* value(const  ::srs_grasping::GetGraspConfigurationsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::srs_grasping::GetGraspConfigurationsRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::srs_grasping::GetGraspConfigurationsResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::srs_grasping::GetGraspConfigurationsResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::srs_grasping::GetGraspConfigurationsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "67606ed8cbee8f72e0a708d704b9126f";
  }

  static const char* value(const  ::srs_grasping::GetGraspConfigurationsResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x67606ed8cbee8f72ULL;
  static const uint64_t static_value2 = 0xe0a708d704b9126fULL;
};

template<class ContainerAllocator>
struct DataType< ::srs_grasping::GetGraspConfigurationsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "srs_grasping/GetGraspConfigurationsResponse";
  }

  static const char* value(const  ::srs_grasping::GetGraspConfigurationsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::srs_grasping::GetGraspConfigurationsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "srs_msgs/GraspConfiguration[] grasp_configuration\n\
\n\
\n\
================================================================================\n\
MSG: srs_msgs/GraspConfiguration\n\
int32 object_id\n\
string hand_type\n\
float64[] sdh_joint_values\n\
string target_link #link which should be moved to pre_grasp (e.g. sdh_palm_link)\n\
geometry_msgs/PoseStamped pre_grasp\n\
geometry_msgs/PoseStamped grasp\n\
string category\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::srs_grasping::GetGraspConfigurationsResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::srs_grasping::GetGraspConfigurationsRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.object_id);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetGraspConfigurationsRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::srs_grasping::GetGraspConfigurationsResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.grasp_configuration);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetGraspConfigurationsResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<srs_grasping::GetGraspConfigurations> {
  static const char* value() 
  {
    return "37caef0185f2ced87cd79f4e67bb74e0";
  }

  static const char* value(const srs_grasping::GetGraspConfigurations&) { return value(); } 
};

template<>
struct DataType<srs_grasping::GetGraspConfigurations> {
  static const char* value() 
  {
    return "srs_grasping/GetGraspConfigurations";
  }

  static const char* value(const srs_grasping::GetGraspConfigurations&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<srs_grasping::GetGraspConfigurationsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "37caef0185f2ced87cd79f4e67bb74e0";
  }

  static const char* value(const srs_grasping::GetGraspConfigurationsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<srs_grasping::GetGraspConfigurationsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "srs_grasping/GetGraspConfigurations";
  }

  static const char* value(const srs_grasping::GetGraspConfigurationsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<srs_grasping::GetGraspConfigurationsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "37caef0185f2ced87cd79f4e67bb74e0";
  }

  static const char* value(const srs_grasping::GetGraspConfigurationsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<srs_grasping::GetGraspConfigurationsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "srs_grasping/GetGraspConfigurations";
  }

  static const char* value(const srs_grasping::GetGraspConfigurationsResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // SRS_GRASPING_SERVICE_GETGRASPCONFIGURATIONS_H

