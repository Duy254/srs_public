/* Auto-generated by genmsg_cpp for file /home/emisario/git/care-o-bot/srs/srs_grasping/msg/IKResult.msg */
#ifndef SRS_GRASPING_MESSAGE_IKRESULT_H
#define SRS_GRASPING_MESSAGE_IKRESULT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace srs_grasping
{
template <class ContainerAllocator>
struct IKResult_ {
  typedef IKResult_<ContainerAllocator> Type;

  IKResult_()
  : pre_position()
  , g_position()
  {
  }

  IKResult_(const ContainerAllocator& _alloc)
  : pre_position(_alloc)
  , g_position(_alloc)
  {
  }

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _pre_position_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  pre_position;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _g_position_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  g_position;


  ROS_DEPRECATED uint32_t get_pre_position_size() const { return (uint32_t)pre_position.size(); }
  ROS_DEPRECATED void set_pre_position_size(uint32_t size) { pre_position.resize((size_t)size); }
  ROS_DEPRECATED void get_pre_position_vec(std::vector<double, typename ContainerAllocator::template rebind<double>::other > & vec) const { vec = this->pre_position; }
  ROS_DEPRECATED void set_pre_position_vec(const std::vector<double, typename ContainerAllocator::template rebind<double>::other > & vec) { this->pre_position = vec; }
  ROS_DEPRECATED uint32_t get_g_position_size() const { return (uint32_t)g_position.size(); }
  ROS_DEPRECATED void set_g_position_size(uint32_t size) { g_position.resize((size_t)size); }
  ROS_DEPRECATED void get_g_position_vec(std::vector<double, typename ContainerAllocator::template rebind<double>::other > & vec) const { vec = this->g_position; }
  ROS_DEPRECATED void set_g_position_vec(const std::vector<double, typename ContainerAllocator::template rebind<double>::other > & vec) { this->g_position = vec; }
private:
  static const char* __s_getDataType_() { return "srs_grasping/IKResult"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "c210c8523fd6ad4179d213c0a49f1504"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
float64[] pre_position\n\
float64[] g_position\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, pre_position);
    ros::serialization::serialize(stream, g_position);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, pre_position);
    ros::serialization::deserialize(stream, g_position);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(pre_position);
    size += ros::serialization::serializationLength(g_position);
    return size;
  }

  typedef boost::shared_ptr< ::srs_grasping::IKResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::srs_grasping::IKResult_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct IKResult
typedef  ::srs_grasping::IKResult_<std::allocator<void> > IKResult;

typedef boost::shared_ptr< ::srs_grasping::IKResult> IKResultPtr;
typedef boost::shared_ptr< ::srs_grasping::IKResult const> IKResultConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::srs_grasping::IKResult_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::srs_grasping::IKResult_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace srs_grasping

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::srs_grasping::IKResult_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::srs_grasping::IKResult_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::srs_grasping::IKResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c210c8523fd6ad4179d213c0a49f1504";
  }

  static const char* value(const  ::srs_grasping::IKResult_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc210c8523fd6ad41ULL;
  static const uint64_t static_value2 = 0x79d213c0a49f1504ULL;
};

template<class ContainerAllocator>
struct DataType< ::srs_grasping::IKResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "srs_grasping/IKResult";
  }

  static const char* value(const  ::srs_grasping::IKResult_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::srs_grasping::IKResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
float64[] pre_position\n\
float64[] g_position\n\
\n\
";
  }

  static const char* value(const  ::srs_grasping::IKResult_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::srs_grasping::IKResult_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pre_position);
    stream.next(m.g_position);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct IKResult_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::srs_grasping::IKResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::srs_grasping::IKResult_<ContainerAllocator> & v) 
  {
    s << indent << "pre_position[]" << std::endl;
    for (size_t i = 0; i < v.pre_position.size(); ++i)
    {
      s << indent << "  pre_position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.pre_position[i]);
    }
    s << indent << "g_position[]" << std::endl;
    for (size_t i = 0; i < v.g_position.size(); ++i)
    {
      s << indent << "  g_position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.g_position[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // SRS_GRASPING_MESSAGE_IKRESULT_H

