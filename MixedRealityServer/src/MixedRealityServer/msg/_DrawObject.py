"""autogenerated by genmsg_py from DrawObject.msg. Do not edit."""
import roslib.message
import struct


class DrawObject(roslib.message.Message):
  _md5sum = "88561013d7f49dbaa9470ed9e1cbe2e6"
  _type = "MixedRealityServer/DrawObject"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string command #ADD or REMOVE
string topic
int32 id
string label
int32 type #CONTOUR_UNKNOWN = 0; CONTOUR_RECTANGLE = 1; CONTOUR_ELIPSE = 2;
float32 x
float32 y
float32 width
float32 height
float32 angle #Degrees
string clr

"""
  __slots__ = ['command','topic','id','label','type','x','y','width','height','angle','clr']
  _slot_types = ['string','string','int32','string','int32','float32','float32','float32','float32','float32','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       command,topic,id,label,type,x,y,width,height,angle,clr
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(DrawObject, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.command is None:
        self.command = ''
      if self.topic is None:
        self.topic = ''
      if self.id is None:
        self.id = 0
      if self.label is None:
        self.label = ''
      if self.type is None:
        self.type = 0
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.width is None:
        self.width = 0.
      if self.height is None:
        self.height = 0.
      if self.angle is None:
        self.angle = 0.
      if self.clr is None:
        self.clr = ''
    else:
      self.command = ''
      self.topic = ''
      self.id = 0
      self.label = ''
      self.type = 0
      self.x = 0.
      self.y = 0.
      self.width = 0.
      self.height = 0.
      self.angle = 0.
      self.clr = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self.command
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x.encode()))
      _x = self.topic
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x.encode()))
      buff.write(_struct_i.pack(self.id))
      _x = self.label
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x.encode()))
      _x = self
      buff.write(_struct_i5f.pack(_x.type, _x.x, _x.y, _x.width, _x.height, _x.angle))
      _x = self.clr
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x.encode()))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.command = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.topic = str[start:end]
      start = end
      end += 4
      (self.id,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.label = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.type, _x.x, _x.y, _x.width, _x.height, _x.angle,) = _struct_i5f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.clr = str[start:end]
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self.command
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x.encode()))
      _x = self.topic
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x.encode()))
      buff.write(_struct_i.pack(self.id))
      _x = self.label
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x.encode()))
      _x = self
      buff.write(_struct_i5f.pack(_x.type, _x.x, _x.y, _x.width, _x.height, _x.angle))
      _x = self.clr
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x.encode()))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.command = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.topic = str[start:end]
      start = end
      end += 4
      (self.id,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.label = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.type, _x.x, _x.y, _x.width, _x.height, _x.angle,) = _struct_i5f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.clr = str[start:end]
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_i = struct.Struct("<i")
_struct_i5f = struct.Struct("<i5f")
