package org.srs.srs_knowledge.task;

import java.io.*;
import java.util.StringTokenizer;
//import org.apache.commons.logging.Log;
import java.util.ArrayList;
import ros.pkg.srs_knowledge.msg.*;
import ros.pkg.geometry_msgs.msg.Pose2D;
import org.srs.srs_knowledge.knowledge_engine.*;
import com.hp.hpl.jena.rdf.model.*;
import com.hp.hpl.jena.query.QueryExecutionFactory;
import com.hp.hpl.jena.query.ResultSet;
import com.hp.hpl.jena.query.QueryExecution;
import com.hp.hpl.jena.query.QuerySolution;

import org.srs.srs_knowledge.task.Task;

public class MoveToTask extends org.srs.srs_knowledge.task.Task
{
	public MoveToTask(String targetContent, Pose2D userPose, OntologyDB onto) 
	{
	    if (onto != null) {
		System.out.println("SET ONTOLOGY DB");
		this.ontoDB = onto;
	    }
	    else {
		System.out.println("NULL ---- SET ONTOLOGY DB");
		this.ontoDB = new OntologyDB();
	    }
	    
	    this.initTask(targetContent, userPose);
	    setTaskType(TaskType.MOVETO_LOCATION);
	}
    
    private void initTask(String targetContent, Pose2D userPose) {
		acts = new ArrayList<ActionTuple>();
		
		setTaskTarget(targetContent);
		System.out.println("TASK.JAVA: Created CurrentTask " + "move "
				+ targetContent);
		constructTask();
	}
	
	protected boolean constructTask() {
		return createSimpleMoveTaskNew();
	}

	private boolean createSimpleMoveTaskNew() {
		// boolean addNewActionTuple(ActionTuple act)
	    /*
		ActionTuple act = new ActionTuple();

		CUAction ca = new CUAction();
		MoveAction ma = new MoveAction();
		PerceptionAction pa = new PerceptionAction();
		GraspAction ga = new GraspAction();
		GenericAction genericAction = new GenericAction();

		// TODO: should obtain information from Ontology here. But here we use
		// temporary hard coded info for testing
		double x = 1;
		double y = 1;
		double theta = 0;

		if (this.targetContent.charAt(0) == '['
				&& this.targetContent.charAt(targetContent.length() - 1) == ']') {
			StringTokenizer st = new StringTokenizer(targetContent, " [],");
			if (st.countTokens() == 3) {
				try {
					x = Double.parseDouble(st.nextToken());
					y = Double.parseDouble(st.nextToken());
					theta = Double.parseDouble(st.nextToken());
					System.out.println(x + "  " + y + " " + theta);
				} catch (Exception e) {
					System.out.println(e.getMessage());
					return false;
				}
			}
		} else {
			System.out.println("======MOVE COMMAND FORMAT=======");
			// TODO Ontology queries
			String prefix = "PREFIX srs: <http://www.srs-project.eu/ontologies/srs.owl#>\n"
					+ "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n"
					+ "PREFIX ipa-kitchen-map: <http://www.srs-project.eu/ontologies/ipa-kitchen-map.owl#>\n";
			String queryString = "SELECT ?x ?y ?theta WHERE { "
					+ "ipa-kitchen-map:" + targetContent
					+ " srs:xCoordinate ?x . " + "ipa-kitchen-map:"
					+ targetContent + " srs:yCoordinate ?y . "
					+ "ipa-kitchen-map:" + targetContent
					+ " srs:orientationTheta ?theta .}";
			System.out.println(prefix + queryString + "\n");

			if (this.ontoDB == null) {
				System.out.println("Ontology Database is NULL");
				return false;
			}

			try {
			    ArrayList<QuerySolution> rset = ontoDB.executeQueryRaw(prefix
										   + queryString);
			    if (rset.size() == 0) {
				System.out.println("ERROR: No move target found from database");
				return false;
			    } else if (rset.size() == 1) {
				System.out
				    .println("INFO: OK info retrieved from DB... ");
				QuerySolution qs = rset.get(0);
				x = qs.getLiteral("x").getFloat();
				y = qs.getLiteral("y").getFloat();
				theta = qs.getLiteral("theta").getFloat();
				System.out.println("x is " + x + ". y is  " + y
						   + ". theta is " + theta);
			    } else {
				System.out.println("WARNING: Multiple options... ");
				QuerySolution qs = rset.get(0);
				x = qs.getLiteral("x").getFloat();
				y = qs.getLiteral("y").getFloat();
				theta = qs.getLiteral("theta").getFloat();
				System.out.println("x is " + x + ". y is  " + y
						   + ". theta is " + theta);
			    }
			} catch (Exception e) {
			    System.out.println("Exception -->  " + e.getMessage());
			    return false;
			}
			// return false;
		}

		ma.targetPose2D.x = x;
		ma.targetPose2D.y = y;
		ma.targetPose2D.theta = theta;

		ca.ma = ma;
		ca.pa = pa;
		ca.ga = ga;
		ca.generic = genericAction;

		try {
			ca.actionFlags = parseActionFlags("0 1 1");
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

		act.setCUAction(ca);
		act.setActionId(1);
		addNewActionTuple(act);

		// add finish action __ success

		act = new ActionTuple();

		ca = new CUAction();
		ma = new MoveAction();
		pa = new PerceptionAction();
		ga = new GraspAction();
		genericAction = new GenericAction();
		genericAction.actionInfo.add("finish_success");
		
		ca.ma = ma;
		ca.pa = pa;
		ca.ga = ga;
		ca.generic = genericAction;

		try {
		    ca.actionFlags = parseActionFlags("0 1 1");
		} catch (Exception e) {
		    System.out.println(e.getMessage());
		}
		act.setActionName("finish_success");
		ca.status = 1;

		act.setCUAction(ca);
		act.setActionId(2);
		act.setParentId(1);
		act.setCondition(true);
		addNewActionTuple(act);

		// add finish action __ fail

		act = new ActionTuple();

		ca = new CUAction();
		ma = new MoveAction();
		pa = new PerceptionAction();
		ga = new GraspAction();
		genericAction = new GenericAction();
		genericAction.actionInfo.add("finish_fail");
		
		ca.ma = ma;
		ca.pa = pa;
		ca.ga = ga;
		ca.generic = genericAction;

		try {
			ca.actionFlags = parseActionFlags("0 1 1");
		} catch (Exception e) {
			System.out.println("Exception -->  " + e.getMessage());
		}

		act.setActionName("finish_fail");

		ca.status = -1;

		act.setCUAction(ca);
		act.setActionId(3);
		act.setParentId(1);
		act.setCondition(false);
		addNewActionTuple(act);

		System.out.println("number of actions: " + acts.size());
		*/
		return true;
	}


	/*
	 * public boolean createSimpleMoveTask() { //currentTask = new Task("move",
	 * "kitchen", null); // boolean addNewActionTuple(ActionTuple act)
	 * ActionTuple act = new ActionTuple();
	 * 
	 * CUAction ca = new CUAction(); MoveAction ma = new MoveAction();
	 * PerceptionAction pa = new PerceptionAction(); GraspAction ga = new
	 * GraspAction();
	 * 
	 * // TODO: should obtain information from Ontology here. But here we use
	 * temporary hard coded info for testing double x = 1; double y = 1; double
	 * theta = 0;
	 * 
	 * if (this.targetContent.equals("home")) { this.targetContent = "[0 0 0]";
	 * } else if (this.targetContent.equals("order")) { this.targetContent =
	 * "[1 -0.5 -0.7]"; } else if (this.targetContent.equals("kitchen")) {
	 * this.targetContent = "[-2.04 0.3 0]"; } else if
	 * (this.targetContent.equals("new_kitchen")) { this.targetContent =
	 * "[-2.14 0.0 0]"; } else if
	 * (this.targetContent.equals("kitchen_backwards")) { this.targetContent =
	 * "[-2.04 -0.3 3.14]"; }
	 * 
	 * if(this.targetContent.charAt(0) == '[' &&
	 * this.targetContent.charAt(targetContent.length() - 1) == ']') {
	 * StringTokenizer st = new StringTokenizer(targetContent, " [],");
	 * if(st.countTokens() == 3) { try { x = Double.parseDouble(st.nextToken());
	 * y = Double.parseDouble(st.nextToken()); theta =
	 * Double.parseDouble(st.nextToken()); System.out.println(x + "  " + y + " "
	 * + theta); } catch(Exception e){ System.out.println(e.getMessage());
	 * return false; } } } else { return false; }
	 * 
	 * ma.targetPose2D.x = x; ma.targetPose2D.y = y; ma.targetPose2D.theta =
	 * theta;
	 * 
	 * ca.ma = ma; ca.pa = pa; ca.ga = ga;
	 * 
	 * try { ca.actionFlags = parseActionFlags("0 1 1"); } catch(Exception e) {
	 * System.out.println(e.getMessage()); }
	 * 
	 * act.setCUAction(ca); act.setActionId(1); addNewActionTuple(act);
	 * 
	 * // add finish action __ success
	 * 
	 * act = new ActionTuple();
	 * 
	 * ca = new CUAction(); ma = new MoveAction(); pa = new PerceptionAction();
	 * ga = new GraspAction();
	 * 
	 * ca.ma = ma; ca.pa = pa; ca.ga = ga;
	 * 
	 * try { ca.actionFlags = parseActionFlags("0 1 1"); } catch(Exception e) {
	 * System.out.println(e.getMessage()); }
	 * act.setActionName("finish_success");
	 * 
	 * if(act.getActionName().equals("finish_success")){ ca.status = 1; }
	 * if(act.getActionName().equals("finish_fail")) { ca.status = -1; }
	 * 
	 * act.setCUAction(ca); act.setActionId(2); act.setParentId(1);
	 * act.setCondition(true); addNewActionTuple(act);
	 * 
	 * // add finish action __ fail
	 * 
	 * act = new ActionTuple();
	 * 
	 * ca = new CUAction(); ma = new MoveAction(); pa = new PerceptionAction();
	 * ga = new GraspAction();
	 * 
	 * ca.ma = ma; ca.pa = pa; ca.ga = ga;
	 * 
	 * try { ca.actionFlags = parseActionFlags("0 1 1"); } catch(Exception e) {
	 * System.out.println(e.getMessage()); }
	 * 
	 * act.setActionName("finish_fail");
	 * 
	 * //ca.status = -1; if(act.getActionName().equals("finish_success")){
	 * ca.status = 1; } if(act.getActionName().equals("finish_fail")) {
	 * ca.status = -1; }
	 * 
	 * act.setCUAction(ca); act.setActionId(3); act.setParentId(1);
	 * act.setCondition(false); addNewActionTuple(act);
	 * 
	 * System.out.println("number of actions: " + acts.size()); return true; }
	 */
    public boolean replan(OntologyDB onto, OntoQueryUtil ontoQuery) {
	return false;
    }
}