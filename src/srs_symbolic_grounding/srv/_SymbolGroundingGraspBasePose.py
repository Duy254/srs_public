"""autogenerated by genmsg_py from SymbolGroundingGraspBasePoseRequest.msg. Do not edit."""
import roslib.message
import struct

import geometry_msgs.msg

class SymbolGroundingGraspBasePoseRequest(roslib.message.Message):
  _md5sum = "ba710e5f626fa97689eac432f6979a7c"
  _type = "srs_symbolic_grounding/SymbolGroundingGraspBasePoseRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 grasp
geometry_msgs/Pose obj_pose
geometry_msgs/Pose2D rb_pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Pose2D
# This expresses a position and orientation on a 2D manifold.

float64 x
float64 y
float64 theta
"""
  __slots__ = ['grasp','obj_pose','rb_pose']
  _slot_types = ['int32','geometry_msgs/Pose','geometry_msgs/Pose2D']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       grasp,obj_pose,rb_pose
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(SymbolGroundingGraspBasePoseRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.grasp is None:
        self.grasp = 0
      if self.obj_pose is None:
        self.obj_pose = geometry_msgs.msg.Pose()
      if self.rb_pose is None:
        self.rb_pose = geometry_msgs.msg.Pose2D()
    else:
      self.grasp = 0
      self.obj_pose = geometry_msgs.msg.Pose()
      self.rb_pose = geometry_msgs.msg.Pose2D()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_i10d.pack(_x.grasp, _x.obj_pose.position.x, _x.obj_pose.position.y, _x.obj_pose.position.z, _x.obj_pose.orientation.x, _x.obj_pose.orientation.y, _x.obj_pose.orientation.z, _x.obj_pose.orientation.w, _x.rb_pose.x, _x.rb_pose.y, _x.rb_pose.theta))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.obj_pose is None:
        self.obj_pose = geometry_msgs.msg.Pose()
      if self.rb_pose is None:
        self.rb_pose = geometry_msgs.msg.Pose2D()
      end = 0
      _x = self
      start = end
      end += 84
      (_x.grasp, _x.obj_pose.position.x, _x.obj_pose.position.y, _x.obj_pose.position.z, _x.obj_pose.orientation.x, _x.obj_pose.orientation.y, _x.obj_pose.orientation.z, _x.obj_pose.orientation.w, _x.rb_pose.x, _x.rb_pose.y, _x.rb_pose.theta,) = _struct_i10d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_i10d.pack(_x.grasp, _x.obj_pose.position.x, _x.obj_pose.position.y, _x.obj_pose.position.z, _x.obj_pose.orientation.x, _x.obj_pose.orientation.y, _x.obj_pose.orientation.z, _x.obj_pose.orientation.w, _x.rb_pose.x, _x.rb_pose.y, _x.rb_pose.theta))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.obj_pose is None:
        self.obj_pose = geometry_msgs.msg.Pose()
      if self.rb_pose is None:
        self.rb_pose = geometry_msgs.msg.Pose2D()
      end = 0
      _x = self
      start = end
      end += 84
      (_x.grasp, _x.obj_pose.position.x, _x.obj_pose.position.y, _x.obj_pose.position.z, _x.obj_pose.orientation.x, _x.obj_pose.orientation.y, _x.obj_pose.orientation.z, _x.obj_pose.orientation.w, _x.rb_pose.x, _x.rb_pose.y, _x.rb_pose.theta,) = _struct_i10d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_i10d = struct.Struct("<i10d")
"""autogenerated by genmsg_py from SymbolGroundingGraspBasePoseResponse.msg. Do not edit."""
import roslib.message
import struct

import geometry_msgs.msg

class SymbolGroundingGraspBasePoseResponse(roslib.message.Message):
  _md5sum = "7714744680271a046e5baf4fa4c26655"
  _type = "srs_symbolic_grounding/SymbolGroundingGraspBasePoseResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 reach
geometry_msgs/Pose2D gbp


================================================================================
MSG: geometry_msgs/Pose2D
# This expresses a position and orientation on a 2D manifold.

float64 x
float64 y
float64 theta
"""
  __slots__ = ['reach','gbp']
  _slot_types = ['float32','geometry_msgs/Pose2D']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       reach,gbp
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(SymbolGroundingGraspBasePoseResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.reach is None:
        self.reach = 0.
      if self.gbp is None:
        self.gbp = geometry_msgs.msg.Pose2D()
    else:
      self.reach = 0.
      self.gbp = geometry_msgs.msg.Pose2D()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_f3d.pack(_x.reach, _x.gbp.x, _x.gbp.y, _x.gbp.theta))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.gbp is None:
        self.gbp = geometry_msgs.msg.Pose2D()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.reach, _x.gbp.x, _x.gbp.y, _x.gbp.theta,) = _struct_f3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_f3d.pack(_x.reach, _x.gbp.x, _x.gbp.y, _x.gbp.theta))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.gbp is None:
        self.gbp = geometry_msgs.msg.Pose2D()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.reach, _x.gbp.x, _x.gbp.y, _x.gbp.theta,) = _struct_f3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_f3d = struct.Struct("<f3d")
class SymbolGroundingGraspBasePose(roslib.message.ServiceDefinition):
  _type          = 'srs_symbolic_grounding/SymbolGroundingGraspBasePose'
  _md5sum = '56b7b17556d2269be31187a1b2484a35'
  _request_class  = SymbolGroundingGraspBasePoseRequest
  _response_class = SymbolGroundingGraspBasePoseResponse
