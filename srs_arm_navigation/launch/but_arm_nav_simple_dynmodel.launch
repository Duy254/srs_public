<launch>

  <param name="/use_sim_time" value="true" />
  
  <rosparam command="load" ns="robot_description_planning" file="$(find srs_arm_navigation)/config/cob3_planning_description.yaml" />

  <!-- mongo database for warehouse viewer -->
  <param name="warehouse_host" value="localhost"/>
  <param name="warehouse_port" value="27020"/>
  <node name="mongo" type="wrapper.py" pkg="mongodb">
    <param name="overwrite" value="false"/>
    <param name="database_path" value="arm_navigation_dbs/cob3"/>
  </node>
  
  <!-- self filter stereo points -->
  <node pkg="robot_self_filter" type="self_filter" respawn="true" name="stereo_self_filter" output="screen">
     <remap from="cloud_in" to="/cam3d/depth/points" />
     <remap from="cloud_out" to="/cam3d/depth/points_filtered" />
     <param name="subsample_value" type="double" value=".01"/>
     <rosparam command="load" file="$(find srs_arm_navigation_percp)/config/self_filter.yaml" />
  </node>
  
   <node pkg="planning_environment" type="environment_server" output="screen" name="environment_server">      
    <param name="use_monitor" type="bool" value="true"/>
    <param name="use_collision_map" type="bool" value="true"/>
    <param name="global_frame" type="string" value="/map"/>
    <remap from="collision_map_occ" to="/but_server_node/but_srv_collision_map"/>
  </node>

  <node pkg="planning_environment" type="planning_scene_validity_server" output="screen" name="planning_scene_validity_server"/>
  
  <include file="$(find srs_arm_navigation)/launch/constraint_aware_kinematics.launch" />
  <include file="$(find srs_arm_navigation)/launch/ompl_planning.launch" />
  <include file="$(find srs_arm_navigation)/launch/trajectory_filter_server.launch" />
  


  <node name="interpolated_ik_node_right" pkg="interpolated_ik_motion_planner" type="interpolated_ik_motion_planner.py" args="r" respawn="false" output="screen">
    <param name="robot_prefix" type="string" value="cob3"/>
    <param name="consistent_angle" type="double" value="1.05"/>
  </node>
  <node name="interpolated_ik_node_left" pkg="interpolated_ik_motion_planner" 
	type="interpolated_ik_motion_planner.py" args="l" respawn="false" output="screen">
    <param name="robot_prefix" type="string" value="cob3"/>
    <param name="consistent_angle" type="double" value="1.05"/>
  </node>

  <node pkg="rviz" type="rviz" name='rviz_warehouse_viewer' args="-d $(find srs_arm_navigation)/config/planning_scene_warehouse_viewer-arm-manip.vcg" />

  <!-- Configuration for COB, bringup simulation -->
  <include file="$(find cob_default_robot_config)/upload_param.launch" />
  <include file="$(find cob_default_env_config)/upload_param.launch" />
  <include file="$(find cob_2dnav)/ros/launch/2dnav.launch" />
  <include file="$(find cob_bringup_sim)/launch/robot.launch" />

  <!-- actionlib server, it's using W.V. libs, acts as bridge between python script and RVIZ plugin -->
  <node pkg="srs_arm_navigation" name="but_arm_manipulation_node" type="but_arm_manipulation_node" respawn="false" />

  <!-- Run BUT dynamic scene model server node -->
  <node name="but_server_node" pkg="srs_env_model" type="but_server_node">
    <param name="pointcloud_subscriber" value="/cam3d/depth/points_filtered"/>
    <param name="max_range" type="double" value="2.0"/>
  </node>
  
  <!-- Run but_gui server -->
  <node name="but_gui_service_server" pkg="srs_env_model" type="but_gui_service_server" />
  
   <!-- Called when left arm executes trajectory using controllers -->
  <param name="execute_left_trajectory" value="/arm_controller/follow_joint_trajectory" />
  <param name="execute_right_trajectory" value="none" />
  
  <!-- Called to get left arm inverse kinematics with collision checking -->
  <param name="left_ik_name" value="/cob3_arm_kinematics/get_constraint_aware_ik" />
  
  <!-- Called to get right arm inverse kinematics with collision checking -->
  <param name="right_ik_name" value="/cob3_none_kinematics/get_constraint_aware_ik" />
  
  <!-- Called to get left arm inverse kinematics without collision checking -->
  <param name="non_coll_left_ik_name" value="/cob3_arm_kinematics/get_ik" />
  
  <!-- Called to get right arm inverse kinematics without collision checking -->
  <param name="non_coll_right_ik_name" value="/cob3_none_kinematics/get_ik" />
  
  <!-- Kinematic chain group name representing the left arm -->
  <param name="left_arm_group" value="arm" />
  
  <!-- Kinematic chain group name representing the right arm -->
  <param name="right_arm_group" value="none" />
  
  <!-- Degree of freedom representing inverse kinematics redundancy on the left arm -->
  <param name="left_redundancy" value="none" />
  
  <!-- Degree of freedom representing inverse kinematics redundancy on the right arm -->
  <param name="right_redundancy" value="none" />
  
  <!-- Link on the left arm to perform inverse kinematics for -->
  <param name="left_ik_link" value="arm_7_link" />
  
  <!-- Link on the right arm to perform inverse kinematics for -->
  <param name="right_ik_link" value="none" />
  
  <!-- Called to plan trajectories given motion plan requests -->
  <param name="planner_service_name" value="/ompl_planning/plan_kinematic_path" />
  
  <!-- Interpolates between end effector positions for the left arm -->
  <param name="left_interpolate_service_name" value="none" /> 
  
  <!-- Interpolates between end effector positions for the right arm -->
  <param name="right_interpolate_service_name" value="none" />
  
  <!-- Called to smooth and optimize a planner trajectory -->
  <param name="trajectory_filter_1_service_name" value="/trajectory_filter_server/filter_trajectory_with_constraints" />
  
    <!-- Called to smooth and optimize a planner trajectory -->
  <param name="trajectory_filter_2_service_name" value="none" />
  
  <!-- Called to get the proximity space -->
  <param name="proximity_space_service_name" value="none" />
  
  <!-- Called to get collision validity of robot state -->
  <param name="proximity_space_validity_name" value="none"/>
  
  <!-- Called to produce a plan that pulls trajectories out of collision -->
  <param name="proximity_space_planner_name" value="none"/>
  
  <!-- Called to send the planning scene to the environment server -->
  <param name="set_planning_scene_diff_name" value="environment_server/set_planning_scene_diff"/>
  
  <param name="vis_topic_name" value="planning_scene_visualizer_markers"/>
  <param name="gazebo_robot_model" value="robot"/>  
  <param name="use_robot_data" value="true"/>

</launch>
