"""autogenerated by genmsg_py from Component.msg. Do not edit."""
import roslib.message
import struct


class Component(roslib.message.Message):
  _md5sum = "34fa2446de99a15241dfcb98c98ebd33"
  _type = "srs_msgs/Component"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# this message contains information to define a list of required components for an action 
uint32 componentID   #ID
string componentName   #Name

"""
  __slots__ = ['componentID','componentName']
  _slot_types = ['uint32','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       componentID,componentName
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(Component, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.componentID is None:
        self.componentID = 0
      if self.componentName is None:
        self.componentName = ''
    else:
      self.componentID = 0
      self.componentName = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      buff.write(_struct_I.pack(self.componentID))
      _x = self.componentName
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x.encode()))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 4
      (self.componentID,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.componentName = str[start:end]
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      buff.write(_struct_I.pack(self.componentID))
      _x = self.componentName
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x.encode()))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 4
      (self.componentID,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.componentName = str[start:end]
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
