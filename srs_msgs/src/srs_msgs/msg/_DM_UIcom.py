"""autogenerated by genmsg_py from DM_UIcom.msg. Do not edit."""
import roslib.message
import struct


class DM_UIcom(roslib.message.Message):
  _md5sum = "9fdc3806df41868867572f18d50a7c34"
  _type = "srs_msgs/DM_UIcom"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# this message contains information to define the comunication between the Decision making (DM) and UI_Pri in case of unexpected error in executing an previously issued command

string command   # currently supported comands for user intervention are: continue? (meaning do you want to continue:yes/no), position? (where to go:kitchen,home,order or coordinate from the map) 
string message   # some free text to be displayed in the popup window to the user
uint32 requestID # the uniqie ID used by DM to distinguish which responce corresponds to which command. Note: the requestID MUST be included in the responceID.

"""
  __slots__ = ['command','message','requestID']
  _slot_types = ['string','string','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       command,message,requestID
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(DM_UIcom, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.command is None:
        self.command = ''
      if self.message is None:
        self.message = ''
      if self.requestID is None:
        self.requestID = 0
    else:
      self.command = ''
      self.message = ''
      self.requestID = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self.command
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x.encode()))
      _x = self.message
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x.encode()))
      buff.write(_struct_I.pack(self.requestID))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.command = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.message = str[start:end]
      start = end
      end += 4
      (self.requestID,) = _struct_I.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self.command
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x.encode()))
      _x = self.message
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x.encode()))
      buff.write(_struct_I.pack(self.requestID))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.command = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.message = str[start:end]
      start = end
      end += 4
      (self.requestID,) = _struct_I.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
