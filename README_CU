Summary
1  gdatabase provides servers for accessing database
2  SRS_control_task provides actionlib and state machines for decsion making
3  srs_msgs provides common format for some messages

1  gdatabase

Setup mysql DB

The DB file is stored in ./gdatabase/db

Step 1, setup mysql
sudo apt-get install mysql-server

Step 2, login mysql with your root password
mysql -p -u root

Step 3 create database and setup the user

in mysql:

CREATE DATABASE srs_gdatabase;
CREATE USER 'srs'@'localhost';
SET PASSWORD FOR 'srs'@'localhost' = OLD_PASSWORD('srs');
GRANT ALL ON srs_gdatabase.* TO 'srs'@'localhost';
quit

Step 4 restore the database
mysql srs_gdatabase < ./gdatabase/db/srs_database -p -u srs

//The password for user srs is srs. You are under srs directory. The path need to be updated for other place.


2  SRS_control_task

The structure of the stack can be found in 
./srs_decisionmaking_stack.pdf

A use case is listed below:

> 1. UI (as an action lib client) sends DM an action (e.g. move to table)
or an action sequence (e.g. move to table, detect milk box, grasp milk
box).
The sequence is not implemented now. The command for: "Which action?" is:
"move" or "grasp" or "detect", "Which parameter for this action" could
be: move to table with symbolic "near", grasp milkbox with symbolic "top_grasp".

> 2. DM (as an action lib server) executes the task with the corresponding
state machines. The DM is the action lib client for the task executor
(action lib server).
Please refer to the stack previously sent. The message can be:
-for action: "move", grasp", "detect".
-for the parameter (depends on the action selected): move: "kitchen", home"
grasp (target object position): example: "[1.2, 3.4, 0.8]".
detect (target object position): example: "[1.2, 3.4, 0.8]".
> 3. DM publishes the feedbacks as the messages (part of action lib server
function).
Feedback from DM to User: the current state as a string (example:
"Translating", "Executing task" ...)
> 4. UI could stop the action lib server execution anytime.
The user can't use the emergency stop, it doesn't work now.
> 5. UI received the feedbacks (part of action lib client function).
Feedback from DM to User: the current state as a string (example:
"Translating", "Executing task" ...)
> 6. DM provides the final result as messages.
Integer: standard format: 0...4 (2:succeeded, 3:Failed ..)
> 7. In case the action sequence is not possible, DM should trigger the
interface_rq_action for a revised action sequence.
None
> 8. In case the robot cannot reach the table, DM should trigger the
interface_rq_map service (in this case UI as server and DM as client) for
> an intermediate target to the robot (robot move to the intermediate target
> first and then the table).
The intermediate target is asked by the error manager in the state machine.
The failed state machine is a simple client which communicates with the
DM as a simple server. In this case, if you want unlock the robot; you
enter a new position from the DM and not from the user interface. The
possible parameters are:
- a word known like "kitchen", "home".
- Or a list in the string, like: "[2.0, 0.2, 1.1]"
> 9. The format of exceptional messages are:
- string current_state
- uint32 exceptional_case_id

