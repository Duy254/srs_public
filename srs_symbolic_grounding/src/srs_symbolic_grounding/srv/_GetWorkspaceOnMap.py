"""autogenerated by genmsg_py from GetWorkspaceOnMapRequest.msg. Do not edit."""
import roslib.message
import struct


class GetWorkspaceOnMapRequest(roslib.message.Message):
  _md5sum = "a14354db805feb47c061b3cb1b443b04"
  _type = "srs_symbolic_grounding/GetWorkspaceOnMapRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """





string map




bool ifGeometryInfo


"""
  __slots__ = ['map','ifGeometryInfo']
  _slot_types = ['string','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       map,ifGeometryInfo
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(GetWorkspaceOnMapRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.map is None:
        self.map = ''
      if self.ifGeometryInfo is None:
        self.ifGeometryInfo = False
    else:
      self.map = ''
      self.ifGeometryInfo = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self.map
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.ifGeometryInfo))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.map = str[start:end]
      start = end
      end += 1
      (self.ifGeometryInfo,) = _struct_B.unpack(str[start:end])
      self.ifGeometryInfo = bool(self.ifGeometryInfo)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self.map
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.ifGeometryInfo))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.map = str[start:end]
      start = end
      end += 1
      (self.ifGeometryInfo,) = _struct_B.unpack(str[start:end])
      self.ifGeometryInfo = bool(self.ifGeometryInfo)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_B = struct.Struct("<B")
"""autogenerated by genmsg_py from GetWorkspaceOnMapResponse.msg. Do not edit."""
import roslib.message
import struct

import geometry_msgs.msg
import srs_symbolic_grounding.msg

class GetWorkspaceOnMapResponse(roslib.message.Message):
  _md5sum = "f0aff2d3a86a260c64b631484c962daf"
  _type = "srs_symbolic_grounding/GetWorkspaceOnMapResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """




string[] objects
string[] classesOfObjects
SRSSpatialInfo[] objectsInfo
string[] houseHoldId

================================================================================
MSG: srs_symbolic_grounding/SRSSpatialInfo
# Point point
# Orientation angles
float32 l
float32 w
float32 h

geometry_msgs/Pose pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

"""
  __slots__ = ['objects','classesOfObjects','objectsInfo','houseHoldId']
  _slot_types = ['string[]','string[]','srs_symbolic_grounding/SRSSpatialInfo[]','string[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       objects,classesOfObjects,objectsInfo,houseHoldId
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(GetWorkspaceOnMapResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.objects is None:
        self.objects = []
      if self.classesOfObjects is None:
        self.classesOfObjects = []
      if self.objectsInfo is None:
        self.objectsInfo = []
      if self.houseHoldId is None:
        self.houseHoldId = []
    else:
      self.objects = []
      self.classesOfObjects = []
      self.objectsInfo = []
      self.houseHoldId = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.classesOfObjects)
      buff.write(_struct_I.pack(length))
      for val1 in self.classesOfObjects:
        length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.objectsInfo)
      buff.write(_struct_I.pack(length))
      for val1 in self.objectsInfo:
        _x = val1
        buff.write(_struct_3f.pack(_x.l, _x.w, _x.h))
        _v1 = val1.pose
        _v2 = _v1.position
        _x = _v2
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v3 = _v1.orientation
        _x = _v3
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.houseHoldId)
      buff.write(_struct_I.pack(length))
      for val1 in self.houseHoldId:
        length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1 = str[start:end]
        self.objects.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.classesOfObjects = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1 = str[start:end]
        self.classesOfObjects.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objectsInfo = []
      for i in range(0, length):
        val1 = srs_symbolic_grounding.msg.SRSSpatialInfo()
        _x = val1
        start = end
        end += 12
        (_x.l, _x.w, _x.h,) = _struct_3f.unpack(str[start:end])
        _v4 = val1.pose
        _v5 = _v4.position
        _x = _v5
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v6 = _v4.orientation
        _x = _v6
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.objectsInfo.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.houseHoldId = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1 = str[start:end]
        self.houseHoldId.append(val1)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.classesOfObjects)
      buff.write(_struct_I.pack(length))
      for val1 in self.classesOfObjects:
        length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.objectsInfo)
      buff.write(_struct_I.pack(length))
      for val1 in self.objectsInfo:
        _x = val1
        buff.write(_struct_3f.pack(_x.l, _x.w, _x.h))
        _v7 = val1.pose
        _v8 = _v7.position
        _x = _v8
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v9 = _v7.orientation
        _x = _v9
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.houseHoldId)
      buff.write(_struct_I.pack(length))
      for val1 in self.houseHoldId:
        length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1 = str[start:end]
        self.objects.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.classesOfObjects = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1 = str[start:end]
        self.classesOfObjects.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objectsInfo = []
      for i in range(0, length):
        val1 = srs_symbolic_grounding.msg.SRSSpatialInfo()
        _x = val1
        start = end
        end += 12
        (_x.l, _x.w, _x.h,) = _struct_3f.unpack(str[start:end])
        _v10 = val1.pose
        _v11 = _v10.position
        _x = _v11
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v12 = _v10.orientation
        _x = _v12
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.objectsInfo.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.houseHoldId = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1 = str[start:end]
        self.houseHoldId.append(val1)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_4d = struct.Struct("<4d")
_struct_3f = struct.Struct("<3f")
_struct_3d = struct.Struct("<3d")
class GetWorkspaceOnMap(roslib.message.ServiceDefinition):
  _type          = 'srs_symbolic_grounding/GetWorkspaceOnMap'
  _md5sum = '4aac5a2e75ff4e1c2a3f288dcf79c97a'
  _request_class  = GetWorkspaceOnMapRequest
  _response_class = GetWorkspaceOnMapResponse
