/* Auto-generated by genmsg_cpp for file /home/beisheng/git/care-o-bot/srs_public/srs_symbolic_grounding/srv/SymbolGroundingScanBasePose.srv */
#ifndef SRS_SYMBOLIC_GROUNDING_SERVICE_SYMBOLGROUNDINGSCANBASEPOSE_H
#define SRS_SYMBOLIC_GROUNDING_SERVICE_SYMBOLGROUNDINGSCANBASEPOSE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "srs_symbolic_grounding/SRSFurnitureGeometry.h"
#include "srs_symbolic_grounding/SRSFurnitureGeometry.h"


#include "geometry_msgs/Pose2D.h"

namespace srs_symbolic_grounding
{
template <class ContainerAllocator>
struct SymbolGroundingScanBasePoseRequest_ {
  typedef SymbolGroundingScanBasePoseRequest_<ContainerAllocator> Type;

  SymbolGroundingScanBasePoseRequest_()
  : parent_obj_geometry()
  , furniture_geometry_list()
  {
  }

  SymbolGroundingScanBasePoseRequest_(const ContainerAllocator& _alloc)
  : parent_obj_geometry(_alloc)
  , furniture_geometry_list(_alloc)
  {
  }

  typedef  ::srs_symbolic_grounding::SRSFurnitureGeometry_<ContainerAllocator>  _parent_obj_geometry_type;
   ::srs_symbolic_grounding::SRSFurnitureGeometry_<ContainerAllocator>  parent_obj_geometry;

  typedef std::vector< ::srs_symbolic_grounding::SRSFurnitureGeometry_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::srs_symbolic_grounding::SRSFurnitureGeometry_<ContainerAllocator> >::other >  _furniture_geometry_list_type;
  std::vector< ::srs_symbolic_grounding::SRSFurnitureGeometry_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::srs_symbolic_grounding::SRSFurnitureGeometry_<ContainerAllocator> >::other >  furniture_geometry_list;


  ROS_DEPRECATED uint32_t get_furniture_geometry_list_size() const { return (uint32_t)furniture_geometry_list.size(); }
  ROS_DEPRECATED void set_furniture_geometry_list_size(uint32_t size) { furniture_geometry_list.resize((size_t)size); }
  ROS_DEPRECATED void get_furniture_geometry_list_vec(std::vector< ::srs_symbolic_grounding::SRSFurnitureGeometry_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::srs_symbolic_grounding::SRSFurnitureGeometry_<ContainerAllocator> >::other > & vec) const { vec = this->furniture_geometry_list; }
  ROS_DEPRECATED void set_furniture_geometry_list_vec(const std::vector< ::srs_symbolic_grounding::SRSFurnitureGeometry_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::srs_symbolic_grounding::SRSFurnitureGeometry_<ContainerAllocator> >::other > & vec) { this->furniture_geometry_list = vec; }
private:
  static const char* __s_getDataType_() { return "srs_symbolic_grounding/SymbolGroundingScanBasePoseRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "23cc208c15dce6f450656fc4c209b68c"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "5b734f5eb1ee3323ec23158f8e5349f6"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "SRSFurnitureGeometry parent_obj_geometry\n\
SRSFurnitureGeometry[] furniture_geometry_list\n\
\n\
================================================================================\n\
MSG: srs_symbolic_grounding/SRSFurnitureGeometry\n\
# Point point\n\
# Orientation angles\n\
float32 l\n\
float32 w\n\
float32 h\n\
\n\
geometry_msgs/Pose pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, parent_obj_geometry);
    ros::serialization::serialize(stream, furniture_geometry_list);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, parent_obj_geometry);
    ros::serialization::deserialize(stream, furniture_geometry_list);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(parent_obj_geometry);
    size += ros::serialization::serializationLength(furniture_geometry_list);
    return size;
  }

  typedef boost::shared_ptr< ::srs_symbolic_grounding::SymbolGroundingScanBasePoseRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::srs_symbolic_grounding::SymbolGroundingScanBasePoseRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SymbolGroundingScanBasePoseRequest
typedef  ::srs_symbolic_grounding::SymbolGroundingScanBasePoseRequest_<std::allocator<void> > SymbolGroundingScanBasePoseRequest;

typedef boost::shared_ptr< ::srs_symbolic_grounding::SymbolGroundingScanBasePoseRequest> SymbolGroundingScanBasePoseRequestPtr;
typedef boost::shared_ptr< ::srs_symbolic_grounding::SymbolGroundingScanBasePoseRequest const> SymbolGroundingScanBasePoseRequestConstPtr;


template <class ContainerAllocator>
struct SymbolGroundingScanBasePoseResponse_ {
  typedef SymbolGroundingScanBasePoseResponse_<ContainerAllocator> Type;

  SymbolGroundingScanBasePoseResponse_()
  : scan_base_pose_list()
  {
  }

  SymbolGroundingScanBasePoseResponse_(const ContainerAllocator& _alloc)
  : scan_base_pose_list(_alloc)
  {
  }

  typedef std::vector< ::geometry_msgs::Pose2D_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose2D_<ContainerAllocator> >::other >  _scan_base_pose_list_type;
  std::vector< ::geometry_msgs::Pose2D_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose2D_<ContainerAllocator> >::other >  scan_base_pose_list;


  ROS_DEPRECATED uint32_t get_scan_base_pose_list_size() const { return (uint32_t)scan_base_pose_list.size(); }
  ROS_DEPRECATED void set_scan_base_pose_list_size(uint32_t size) { scan_base_pose_list.resize((size_t)size); }
  ROS_DEPRECATED void get_scan_base_pose_list_vec(std::vector< ::geometry_msgs::Pose2D_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose2D_<ContainerAllocator> >::other > & vec) const { vec = this->scan_base_pose_list; }
  ROS_DEPRECATED void set_scan_base_pose_list_vec(const std::vector< ::geometry_msgs::Pose2D_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose2D_<ContainerAllocator> >::other > & vec) { this->scan_base_pose_list = vec; }
private:
  static const char* __s_getDataType_() { return "srs_symbolic_grounding/SymbolGroundingScanBasePoseResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "66b4de75c1cdba6b484a2621de9dc0d6"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "5b734f5eb1ee3323ec23158f8e5349f6"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "geometry_msgs/Pose2D[] scan_base_pose_list\n\
\n\
\n\
\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose2D\n\
# This expresses a position and orientation on a 2D manifold.\n\
\n\
float64 x\n\
float64 y\n\
float64 theta\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, scan_base_pose_list);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, scan_base_pose_list);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(scan_base_pose_list);
    return size;
  }

  typedef boost::shared_ptr< ::srs_symbolic_grounding::SymbolGroundingScanBasePoseResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::srs_symbolic_grounding::SymbolGroundingScanBasePoseResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SymbolGroundingScanBasePoseResponse
typedef  ::srs_symbolic_grounding::SymbolGroundingScanBasePoseResponse_<std::allocator<void> > SymbolGroundingScanBasePoseResponse;

typedef boost::shared_ptr< ::srs_symbolic_grounding::SymbolGroundingScanBasePoseResponse> SymbolGroundingScanBasePoseResponsePtr;
typedef boost::shared_ptr< ::srs_symbolic_grounding::SymbolGroundingScanBasePoseResponse const> SymbolGroundingScanBasePoseResponseConstPtr;

struct SymbolGroundingScanBasePose
{

typedef SymbolGroundingScanBasePoseRequest Request;
typedef SymbolGroundingScanBasePoseResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SymbolGroundingScanBasePose
} // namespace srs_symbolic_grounding

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::srs_symbolic_grounding::SymbolGroundingScanBasePoseRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::srs_symbolic_grounding::SymbolGroundingScanBasePoseRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::srs_symbolic_grounding::SymbolGroundingScanBasePoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "23cc208c15dce6f450656fc4c209b68c";
  }

  static const char* value(const  ::srs_symbolic_grounding::SymbolGroundingScanBasePoseRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x23cc208c15dce6f4ULL;
  static const uint64_t static_value2 = 0x50656fc4c209b68cULL;
};

template<class ContainerAllocator>
struct DataType< ::srs_symbolic_grounding::SymbolGroundingScanBasePoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "srs_symbolic_grounding/SymbolGroundingScanBasePoseRequest";
  }

  static const char* value(const  ::srs_symbolic_grounding::SymbolGroundingScanBasePoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::srs_symbolic_grounding::SymbolGroundingScanBasePoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "SRSFurnitureGeometry parent_obj_geometry\n\
SRSFurnitureGeometry[] furniture_geometry_list\n\
\n\
================================================================================\n\
MSG: srs_symbolic_grounding/SRSFurnitureGeometry\n\
# Point point\n\
# Orientation angles\n\
float32 l\n\
float32 w\n\
float32 h\n\
\n\
geometry_msgs/Pose pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::srs_symbolic_grounding::SymbolGroundingScanBasePoseRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::srs_symbolic_grounding::SymbolGroundingScanBasePoseResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::srs_symbolic_grounding::SymbolGroundingScanBasePoseResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::srs_symbolic_grounding::SymbolGroundingScanBasePoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "66b4de75c1cdba6b484a2621de9dc0d6";
  }

  static const char* value(const  ::srs_symbolic_grounding::SymbolGroundingScanBasePoseResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x66b4de75c1cdba6bULL;
  static const uint64_t static_value2 = 0x484a2621de9dc0d6ULL;
};

template<class ContainerAllocator>
struct DataType< ::srs_symbolic_grounding::SymbolGroundingScanBasePoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "srs_symbolic_grounding/SymbolGroundingScanBasePoseResponse";
  }

  static const char* value(const  ::srs_symbolic_grounding::SymbolGroundingScanBasePoseResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::srs_symbolic_grounding::SymbolGroundingScanBasePoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/Pose2D[] scan_base_pose_list\n\
\n\
\n\
\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose2D\n\
# This expresses a position and orientation on a 2D manifold.\n\
\n\
float64 x\n\
float64 y\n\
float64 theta\n\
";
  }

  static const char* value(const  ::srs_symbolic_grounding::SymbolGroundingScanBasePoseResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::srs_symbolic_grounding::SymbolGroundingScanBasePoseRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.parent_obj_geometry);
    stream.next(m.furniture_geometry_list);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SymbolGroundingScanBasePoseRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::srs_symbolic_grounding::SymbolGroundingScanBasePoseResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.scan_base_pose_list);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SymbolGroundingScanBasePoseResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<srs_symbolic_grounding::SymbolGroundingScanBasePose> {
  static const char* value() 
  {
    return "5b734f5eb1ee3323ec23158f8e5349f6";
  }

  static const char* value(const srs_symbolic_grounding::SymbolGroundingScanBasePose&) { return value(); } 
};

template<>
struct DataType<srs_symbolic_grounding::SymbolGroundingScanBasePose> {
  static const char* value() 
  {
    return "srs_symbolic_grounding/SymbolGroundingScanBasePose";
  }

  static const char* value(const srs_symbolic_grounding::SymbolGroundingScanBasePose&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<srs_symbolic_grounding::SymbolGroundingScanBasePoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5b734f5eb1ee3323ec23158f8e5349f6";
  }

  static const char* value(const srs_symbolic_grounding::SymbolGroundingScanBasePoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<srs_symbolic_grounding::SymbolGroundingScanBasePoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "srs_symbolic_grounding/SymbolGroundingScanBasePose";
  }

  static const char* value(const srs_symbolic_grounding::SymbolGroundingScanBasePoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<srs_symbolic_grounding::SymbolGroundingScanBasePoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5b734f5eb1ee3323ec23158f8e5349f6";
  }

  static const char* value(const srs_symbolic_grounding::SymbolGroundingScanBasePoseResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<srs_symbolic_grounding::SymbolGroundingScanBasePoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "srs_symbolic_grounding/SymbolGroundingScanBasePose";
  }

  static const char* value(const srs_symbolic_grounding::SymbolGroundingScanBasePoseResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // SRS_SYMBOLIC_GROUNDING_SERVICE_SYMBOLGROUNDINGSCANBASEPOSE_H

