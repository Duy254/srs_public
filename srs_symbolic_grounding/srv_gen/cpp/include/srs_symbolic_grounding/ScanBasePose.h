/* Auto-generated by genmsg_cpp for file /home/beisheng/git/care-o-bot/srs_public/srs_symbolic_grounding/srv/ScanBasePose.srv */
#ifndef SRS_SYMBOLIC_GROUNDING_SERVICE_SCANBASEPOSE_H
#define SRS_SYMBOLIC_GROUNDING_SERVICE_SCANBASEPOSE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "srs_msgs/SRSSpatialInfo.h"


#include "geometry_msgs/Pose2D.h"

namespace srs_symbolic_grounding
{
template <class ContainerAllocator>
struct ScanBasePoseRequest_ {
  typedef ScanBasePoseRequest_<ContainerAllocator> Type;

  ScanBasePoseRequest_()
  : parent_obj_geometry()
  {
  }

  ScanBasePoseRequest_(const ContainerAllocator& _alloc)
  : parent_obj_geometry(_alloc)
  {
  }

  typedef  ::srs_msgs::SRSSpatialInfo_<ContainerAllocator>  _parent_obj_geometry_type;
   ::srs_msgs::SRSSpatialInfo_<ContainerAllocator>  parent_obj_geometry;


private:
  static const char* __s_getDataType_() { return "srs_symbolic_grounding/ScanBasePoseRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "e9544004a6cbf3086f8e6192829b56f4"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "0b68fdc0a9a83294fed2acbcecc407b6"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "srs_msgs/SRSSpatialInfo parent_obj_geometry\n\
\n\
================================================================================\n\
MSG: srs_msgs/SRSSpatialInfo\n\
# Point point\n\
# Orientation angles\n\
float32 l\n\
float32 w\n\
float32 h\n\
\n\
geometry_msgs/Pose pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, parent_obj_geometry);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, parent_obj_geometry);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(parent_obj_geometry);
    return size;
  }

  typedef boost::shared_ptr< ::srs_symbolic_grounding::ScanBasePoseRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::srs_symbolic_grounding::ScanBasePoseRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ScanBasePoseRequest
typedef  ::srs_symbolic_grounding::ScanBasePoseRequest_<std::allocator<void> > ScanBasePoseRequest;

typedef boost::shared_ptr< ::srs_symbolic_grounding::ScanBasePoseRequest> ScanBasePoseRequestPtr;
typedef boost::shared_ptr< ::srs_symbolic_grounding::ScanBasePoseRequest const> ScanBasePoseRequestConstPtr;


template <class ContainerAllocator>
struct ScanBasePoseResponse_ {
  typedef ScanBasePoseResponse_<ContainerAllocator> Type;

  ScanBasePoseResponse_()
  : scan_base_pose_list()
  {
  }

  ScanBasePoseResponse_(const ContainerAllocator& _alloc)
  : scan_base_pose_list(_alloc)
  {
  }

  typedef std::vector< ::geometry_msgs::Pose2D_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose2D_<ContainerAllocator> >::other >  _scan_base_pose_list_type;
  std::vector< ::geometry_msgs::Pose2D_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose2D_<ContainerAllocator> >::other >  scan_base_pose_list;


  ROS_DEPRECATED uint32_t get_scan_base_pose_list_size() const { return (uint32_t)scan_base_pose_list.size(); }
  ROS_DEPRECATED void set_scan_base_pose_list_size(uint32_t size) { scan_base_pose_list.resize((size_t)size); }
  ROS_DEPRECATED void get_scan_base_pose_list_vec(std::vector< ::geometry_msgs::Pose2D_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose2D_<ContainerAllocator> >::other > & vec) const { vec = this->scan_base_pose_list; }
  ROS_DEPRECATED void set_scan_base_pose_list_vec(const std::vector< ::geometry_msgs::Pose2D_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose2D_<ContainerAllocator> >::other > & vec) { this->scan_base_pose_list = vec; }
private:
  static const char* __s_getDataType_() { return "srs_symbolic_grounding/ScanBasePoseResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "66b4de75c1cdba6b484a2621de9dc0d6"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "0b68fdc0a9a83294fed2acbcecc407b6"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "geometry_msgs/Pose2D[] scan_base_pose_list\n\
\n\
\n\
\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose2D\n\
# This expresses a position and orientation on a 2D manifold.\n\
\n\
float64 x\n\
float64 y\n\
float64 theta\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, scan_base_pose_list);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, scan_base_pose_list);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(scan_base_pose_list);
    return size;
  }

  typedef boost::shared_ptr< ::srs_symbolic_grounding::ScanBasePoseResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::srs_symbolic_grounding::ScanBasePoseResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ScanBasePoseResponse
typedef  ::srs_symbolic_grounding::ScanBasePoseResponse_<std::allocator<void> > ScanBasePoseResponse;

typedef boost::shared_ptr< ::srs_symbolic_grounding::ScanBasePoseResponse> ScanBasePoseResponsePtr;
typedef boost::shared_ptr< ::srs_symbolic_grounding::ScanBasePoseResponse const> ScanBasePoseResponseConstPtr;

struct ScanBasePose
{

typedef ScanBasePoseRequest Request;
typedef ScanBasePoseResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct ScanBasePose
} // namespace srs_symbolic_grounding

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::srs_symbolic_grounding::ScanBasePoseRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::srs_symbolic_grounding::ScanBasePoseRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::srs_symbolic_grounding::ScanBasePoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e9544004a6cbf3086f8e6192829b56f4";
  }

  static const char* value(const  ::srs_symbolic_grounding::ScanBasePoseRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe9544004a6cbf308ULL;
  static const uint64_t static_value2 = 0x6f8e6192829b56f4ULL;
};

template<class ContainerAllocator>
struct DataType< ::srs_symbolic_grounding::ScanBasePoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "srs_symbolic_grounding/ScanBasePoseRequest";
  }

  static const char* value(const  ::srs_symbolic_grounding::ScanBasePoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::srs_symbolic_grounding::ScanBasePoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "srs_msgs/SRSSpatialInfo parent_obj_geometry\n\
\n\
================================================================================\n\
MSG: srs_msgs/SRSSpatialInfo\n\
# Point point\n\
# Orientation angles\n\
float32 l\n\
float32 w\n\
float32 h\n\
\n\
geometry_msgs/Pose pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::srs_symbolic_grounding::ScanBasePoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::srs_symbolic_grounding::ScanBasePoseRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::srs_symbolic_grounding::ScanBasePoseResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::srs_symbolic_grounding::ScanBasePoseResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::srs_symbolic_grounding::ScanBasePoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "66b4de75c1cdba6b484a2621de9dc0d6";
  }

  static const char* value(const  ::srs_symbolic_grounding::ScanBasePoseResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x66b4de75c1cdba6bULL;
  static const uint64_t static_value2 = 0x484a2621de9dc0d6ULL;
};

template<class ContainerAllocator>
struct DataType< ::srs_symbolic_grounding::ScanBasePoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "srs_symbolic_grounding/ScanBasePoseResponse";
  }

  static const char* value(const  ::srs_symbolic_grounding::ScanBasePoseResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::srs_symbolic_grounding::ScanBasePoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/Pose2D[] scan_base_pose_list\n\
\n\
\n\
\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose2D\n\
# This expresses a position and orientation on a 2D manifold.\n\
\n\
float64 x\n\
float64 y\n\
float64 theta\n\
";
  }

  static const char* value(const  ::srs_symbolic_grounding::ScanBasePoseResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::srs_symbolic_grounding::ScanBasePoseRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.parent_obj_geometry);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ScanBasePoseRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::srs_symbolic_grounding::ScanBasePoseResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.scan_base_pose_list);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ScanBasePoseResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<srs_symbolic_grounding::ScanBasePose> {
  static const char* value() 
  {
    return "0b68fdc0a9a83294fed2acbcecc407b6";
  }

  static const char* value(const srs_symbolic_grounding::ScanBasePose&) { return value(); } 
};

template<>
struct DataType<srs_symbolic_grounding::ScanBasePose> {
  static const char* value() 
  {
    return "srs_symbolic_grounding/ScanBasePose";
  }

  static const char* value(const srs_symbolic_grounding::ScanBasePose&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<srs_symbolic_grounding::ScanBasePoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0b68fdc0a9a83294fed2acbcecc407b6";
  }

  static const char* value(const srs_symbolic_grounding::ScanBasePoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<srs_symbolic_grounding::ScanBasePoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "srs_symbolic_grounding/ScanBasePose";
  }

  static const char* value(const srs_symbolic_grounding::ScanBasePoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<srs_symbolic_grounding::ScanBasePoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0b68fdc0a9a83294fed2acbcecc407b6";
  }

  static const char* value(const srs_symbolic_grounding::ScanBasePoseResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<srs_symbolic_grounding::ScanBasePoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "srs_symbolic_grounding/ScanBasePose";
  }

  static const char* value(const srs_symbolic_grounding::ScanBasePoseResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // SRS_SYMBOLIC_GROUNDING_SERVICE_SCANBASEPOSE_H

