/* Auto-generated by genmsg_cpp for file /home/beisheng/git/care-o-bot/srs_public/srs_symbolic_grounding/msg/SRSSpatialInfo.msg */
#ifndef SRS_SYMBOLIC_GROUNDING_MESSAGE_SRSSPATIALINFO_H
#define SRS_SYMBOLIC_GROUNDING_MESSAGE_SRSSPATIALINFO_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Pose.h"

namespace srs_symbolic_grounding
{
template <class ContainerAllocator>
struct SRSSpatialInfo_ {
  typedef SRSSpatialInfo_<ContainerAllocator> Type;

  SRSSpatialInfo_()
  : l(0.0)
  , w(0.0)
  , h(0.0)
  , pose()
  {
  }

  SRSSpatialInfo_(const ContainerAllocator& _alloc)
  : l(0.0)
  , w(0.0)
  , h(0.0)
  , pose(_alloc)
  {
  }

  typedef float _l_type;
  float l;

  typedef float _w_type;
  float w;

  typedef float _h_type;
  float h;

  typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
   ::geometry_msgs::Pose_<ContainerAllocator>  pose;


private:
  static const char* __s_getDataType_() { return "srs_symbolic_grounding/SRSSpatialInfo"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "258ee9bd984fca3e863d2c8404dc39e3"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# Point point\n\
# Orientation angles\n\
float32 l\n\
float32 w\n\
float32 h\n\
\n\
geometry_msgs/Pose pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, l);
    ros::serialization::serialize(stream, w);
    ros::serialization::serialize(stream, h);
    ros::serialization::serialize(stream, pose);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, l);
    ros::serialization::deserialize(stream, w);
    ros::serialization::deserialize(stream, h);
    ros::serialization::deserialize(stream, pose);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(l);
    size += ros::serialization::serializationLength(w);
    size += ros::serialization::serializationLength(h);
    size += ros::serialization::serializationLength(pose);
    return size;
  }

  typedef boost::shared_ptr< ::srs_symbolic_grounding::SRSSpatialInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::srs_symbolic_grounding::SRSSpatialInfo_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SRSSpatialInfo
typedef  ::srs_symbolic_grounding::SRSSpatialInfo_<std::allocator<void> > SRSSpatialInfo;

typedef boost::shared_ptr< ::srs_symbolic_grounding::SRSSpatialInfo> SRSSpatialInfoPtr;
typedef boost::shared_ptr< ::srs_symbolic_grounding::SRSSpatialInfo const> SRSSpatialInfoConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::srs_symbolic_grounding::SRSSpatialInfo_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::srs_symbolic_grounding::SRSSpatialInfo_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace srs_symbolic_grounding

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::srs_symbolic_grounding::SRSSpatialInfo_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::srs_symbolic_grounding::SRSSpatialInfo_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::srs_symbolic_grounding::SRSSpatialInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "258ee9bd984fca3e863d2c8404dc39e3";
  }

  static const char* value(const  ::srs_symbolic_grounding::SRSSpatialInfo_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x258ee9bd984fca3eULL;
  static const uint64_t static_value2 = 0x863d2c8404dc39e3ULL;
};

template<class ContainerAllocator>
struct DataType< ::srs_symbolic_grounding::SRSSpatialInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "srs_symbolic_grounding/SRSSpatialInfo";
  }

  static const char* value(const  ::srs_symbolic_grounding::SRSSpatialInfo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::srs_symbolic_grounding::SRSSpatialInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Point point\n\
# Orientation angles\n\
float32 l\n\
float32 w\n\
float32 h\n\
\n\
geometry_msgs/Pose pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::srs_symbolic_grounding::SRSSpatialInfo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::srs_symbolic_grounding::SRSSpatialInfo_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::srs_symbolic_grounding::SRSSpatialInfo_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.l);
    stream.next(m.w);
    stream.next(m.h);
    stream.next(m.pose);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SRSSpatialInfo_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::srs_symbolic_grounding::SRSSpatialInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::srs_symbolic_grounding::SRSSpatialInfo_<ContainerAllocator> & v) 
  {
    s << indent << "l: ";
    Printer<float>::stream(s, indent + "  ", v.l);
    s << indent << "w: ";
    Printer<float>::stream(s, indent + "  ", v.w);
    s << indent << "h: ";
    Printer<float>::stream(s, indent + "  ", v.h);
    s << indent << "pose: ";
s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
  }
};


} // namespace message_operations
} // namespace ros

#endif // SRS_SYMBOLIC_GROUNDING_MESSAGE_SRSSPATIALINFO_H

